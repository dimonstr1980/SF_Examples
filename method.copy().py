# Как уже упоминалось ранее, эту особенность стоит учитывать при работе со списками.
# При работе со списками есть особенность, которую необходимо рассмотреть.

L = ['Hello', 'world']
M = L
print(M is L)

# Очевидно, что эти списки будут равны по своим значениям (сравнивая через ==).
# И при таком присваивании в M скопируется не сам список L, а его идентификатор!
# Поэтому, изменяя список M, мы увидим неожиданные изменения в списке L.

M.append('!')
print(L)

# Чтобы избежать такого поворота событий, список нужно копировать.
# Метод copy принимает исходный объект коллекции в качестве входных данных и создает
# новый объект коллекции со ссылкой на элементы исходного объекта коллекции.
# Затем он возвращает ссылку на новый объект коллекции.

M = L.copy()
print(M is L)