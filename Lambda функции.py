# Lambda функции.

# Функции map и filter принимают в виде первого аргумента другую функцию, которая должна применяться
# к каждому элементу. Иногда встроенных функций не хватает, и приходится объявлять функцию, которая
# зачастую будет применена всего один раз. Но при этом она будет загромождать исходный код.

# Специально для таких одноразовых функций были сделаны анонимные функции.
# Объявляются они по ключевому слову lambda.

# эти две функции выполняют одно и тоже — складывают два числа
def my_function(x1, x2):  # Обычная функция
   return x2 + x1

lambda x1, x2: x2 + x1  # Анонимная функция

# Анонимные функции могут содержать в себе только одну инструкцию (выражение), которую они выполняют.

# Возвести первые 10 натуральных чисел в квадрат
list(map(lambda x: x ** 2, range(1, 11)))  # правильно
# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

# list(map(lambda x: x ** 2; x + 1, range(1, 11))) неправильно, т.к. lambda содержит две конструкции.

# Для чего могут быть полезны lambda-функции? Рассмотрим несколько примеров. Предположим, мы хотим
# отсортировать словарь по значениям. Вообще говоря, словарь (его еще называют ассоциативным массивом)
# является неупорядоченной структурой данных. Иными словами, порядок хранения пар ключ-значение в
# памяти может быть произвольным. Однако создатели языка Python, начиная с версии 3.6, изменили
# реализацию словарей таким образом, что порядок ключей «запоминается». И потому упорядочивание
# словаря в Python становится осмысленным. По умолчанию словарь сортируется по ключам.

d = {2 : "c", 1 : "d", 4 : "a", 3 : "b"}
# Чтобы отсортировать его по ключам, нужно сделать так:
print(dict(sorted(d.items()))) # {1: 'd', 2: 'c', 3: 'b', 4: 'a'}

# А вот чтобы отсортировать словарь по значениям, необходимо указать, что сортировать нужно по второму
# элементу кортежа ключ-значение. Тут на помощь приходят lambda-функции. У встроенной функции sorted()
# можно задать аргумент key, который укажет, по какому ключу нужно производить сортировку.

sorted(d.items(), key = lambda x: x[1])  # сортировка по значению словаря

#   Итог по lambda-функциям:
#
# - используются один раз;
# - не загромождают код программы;
# - после выполнения сразу удаляются;
# - могут выполнять только одно действие.

# Предположим у нас есть список с данными о росте и весе людей.
# Задача — отсортировать их по индексу массы тела.
# Он вычисляется по формуле: рост в метрах возвести в квадрат,
# потом массу тела в килограммах разделить на полученную цифру.

data = [
   (82, 191),
   (68, 174),
   (90, 189),
   (73, 179),
   (76, 184)
]

print(sorted(data, key = lambda x: x[0] / x[1] ** 2))

# Из списка в предыдущем задании найдите кортеж с минимальным индексом массы тела

print(min(data, key = lambda x: x[0] / x[1] ** 2))  # отбор по ключу